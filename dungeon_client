#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# pylint: disable=W0613

'''
    ICE Gauntlet REMOTE GAME
'''

import sys
import uuid
import atexit
import json
import argparse
import pickle
import Ice

# pylint: disable=E0401
# pylint: disable=C0413
import IceStorm
Ice.loadSlice('icegauntlet.ice')
import IceGauntlet
# pylint: enable=E0401
# pylint: enable=C0413

import game
import game.common
import game.screens
import game.pyxeltools
import game.orchestration

from game.common import AVAILABLE_OBJECT_IDS, EMPTY_TILE, NULL_TILE
from game.pyxeltools import load_json_map

EXIT_OK = 0
BAD_COMMAND_LINE = 1

DEFAULT_HERO = game.common.HEROES[0]

class DungeonAreaSync(IceGauntlet.DungeonAreaSync):
    '''
    Class that implements the interface to communicate via the event channel
    '''
    def __init__(self, event_handler):
        self.event_handler = event_handler

    def fireEvent(self, event, senderId, current=None):
        '''Loads the event and calls the event handler'''
        event = pickle.loads(event)
        self.event_handler(event, senderId)

class RemoteArea:
    '''
    Area class to handle events
    '''
    def __init__(self, remote_area, topic_manager, dungeon_adapter):
        self.event_handler = self.__discard_event__
        topic = topic_manager.retrieve(remote_area.getEventChannel())

        self.publisher = topic.getPublisher()
        self.publisher = IceGauntlet.DungeonAreaSyncPrx.uncheckedCast(self.publisher)

        self.remote_area = remote_area
        self.client_id = str(uuid.uuid4())

        with open("temp_map.json", 'w') as temp_map:
            temp_map.write(remote_area.getMap())

        self.room_name, self.author, room_data = load_json_map("temp_map.json")
        self.objects = remote_area.getItems()
        #pass to a list of tuples
        self.objects = [(i.itemId, i.itemType, (i.positionX, i.positionY)) for i in self.objects]
        self.actors = remote_area.getActors()
        self.actors = [(a.actorId, json.loads(a.attributes)) for a in self.actors]
        self.room_data = []
        y_position = 0
        for row in room_data:
            x_position = 0
            filtered_row = []
            for tile in row:
                if tile in AVAILABLE_OBJECT_IDS:
                    filtered_row.append(EMPTY_TILE)
                elif tile == NULL_TILE:
                    filtered_row.append(EMPTY_TILE)
                else:
                    filtered_row.append(tile)
                x_position += 1
            y_position += 1
            self.room_data.append(filtered_row)

        subs = dungeon_adapter.addWithUUID(DungeonAreaSync(self.remote_event_handler))
        topic.subscribeAndGetPublisher({}, subs)

    def getMap(self):
        '''Obtains the map data pertaining to the area'''
        return self.room_name, self.author, self.room_data

    def getObjects(self):
        '''Returns the current object list in the map'''
        return self.objects

    def getActors(self):
        '''Returns the list of actors currently in the map'''
        return self.actors

    def fire_event(self, event, only_local=False):
        '''Fires the event through the publisher'''
        self.publisher.fireEvent(pickle.dumps(event), self.client_id)
        if not only_local:
            self.event_handler(event)

    def abandon(self):
        '''Method to abandon area'''
        pass

    def __discard_event__(self, event):
        '''Discards the event without doing anything'''
        pass

    def remote_event_handler(self, event, sender_id):
        ''' Event triggered when someone publish in the dungeon area topic'''

        if sender_id == self.client_id:
            return

        if event[0] in ['spawn_actor', 'kill_object', 'open_door']: #filter desired events
            print(event)
            if event[0] == 'spawn_actor' and isinstance(event[2], str):
                self.event_handler((event[0], event[1], json.loads(event[2])))
            else:
                self.event_handler(event)

class RemoteDungeonMap(Ice.Application):
    '''Store a list of rooms'''
    def __init__(self, dungeon_proxy, hero):
        self.dungeon_proxy = dungeon_proxy
        self.hero = hero
        self.dungeon_servant = None
        self.current_area = None
        self.dungeon_adapter = None
        self.topic_mgr = None

    def run(self, args):
        '''Launch the game'''
        self.topic_mgr = self.get_topic_manager()
        if not self.topic_mgr:
            print('Invalid topic manager proxy')
            return 1
        self.dungeon_adapter = self.communicator().createObjectAdapter('DungeonClientAdapter')
        self.dungeon_adapter.activate()
        dungeon_proxy = self.communicator().stringToProxy(self.dungeon_proxy)
        self.dungeon_servant = IceGauntlet.DungeonPrx.checkedCast(dungeon_proxy)
        if not self.dungeon_servant:
            raise RuntimeError('Invalid proxy')

        self.shutdownOnInterrupt()

        game.pyxeltools.initialize()
        gauntlet = game.Game(self.hero, self)
        gauntlet.add_state(game.screens.TileScreen, game.common.INITIAL_SCREEN)
        gauntlet.add_state(game.screens.StatsScreen, game.common.STATUS_SCREEN)
        gauntlet.add_state(game.screens.GameScreen, game.common.GAME_SCREEN)
        gauntlet.add_state(game.screens.GameOverScreen, game.common.GAME_OVER_SCREEN)
        gauntlet.add_state(game.screens.GoodEndScreen, game.common.GOOD_END_SCREEN)

        try:
            gauntlet.start()
        except SystemExit:
            pass

    @property
    def next_area(self):
        '''To obtain a new room'''
        if self.current_area is None:
            self.current_area = self.dungeon_servant.getEntrance()
        else:
            self.current_area = self.current_area.getNextArea()
        return RemoteArea(self.current_area, self.topic_mgr, self.dungeon_adapter)

    @property
    def finished(self):
        '''To know if the game has finished'''
        return False

    def abandon_area(self):
        '''To abandon the area when going to a new one'''
        pass

    def get_topic_manager(self):
        '''To obtain the topic manager'''
        proxy = self.communicator().propertyToProxy('IceStorm.TopicManager.Proxy')
        if proxy is None:
            print("Invalid topic manager proxy")
            return None
        # pylint: disable=E1101
        return IceStorm.TopicManagerPrx.checkedCast(proxy)
        # pylint: enable=C0413

@atexit.register
# pylint: disable=W0613
def bye(*args, **kwargs):
    '''Exit callback, use for shoutdown'''
    print('Thanks for playing!')
# pylint: enable=W0613

def parse_commandline():
    '''Parse and check commandline'''
    parser = argparse.ArgumentParser('IceDungeon Local Game')
    parser.add_argument('PROXY', type=str, help='proxy of the Map server')
    parser.add_argument(
        '-p', '--player', default=DEFAULT_HERO, choices=game.common.HEROES,
        dest='hero', help='Hero to play with'
    )
    parser.add_argument('--Ice.Config', type=str)
    options = parser.parse_args()

    return options


def main():
    '''Start game according to commandline'''
    user_options = parse_commandline()
    if not user_options:
        return BAD_COMMAND_LINE

    dungeon = RemoteDungeonMap(user_options.PROXY, user_options.hero)
    dungeon.main(sys.argv)

    return EXIT_OK


if __name__ == '__main__':
    sys.exit(main())
